Index: __init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from flask import Flask, redirect, url_for, render_template, session, request, jsonify\r\nfrom Forms import *\r\nfrom Form import CreateReservationForm, CreateReviewForm\r\nfrom datetime import datetime\r\nfrom Guest import *\r\nfrom collections import Counter\r\nfrom Hospital import *\r\nfrom Occupation import *\r\nfrom Supplier import *\r\nfrom Inventory import *\r\nfrom Partnerships import *\r\nfrom Order import *\r\nfrom Request import *\r\nimport shelve ,Reservation, Review,smtplib,ssl\r\nimport json\r\nimport random\r\nimport PackageDeal\r\n\r\n\r\n\r\n\r\n\r\napp = Flask(__name__)\r\napp.config[\"SECRET_KEY\"]= \"@ajhdfbajshd\"\r\n\r\n\r\n#Gerald's part\r\n\r\n@app.route('/Demo')\r\ndef Demo():\r\n    return render_template('TestuserHome.html')\r\n\r\n@app.route('/')\r\ndef user_home():\r\n    reviews_dict = {}\r\n    try:\r\n        db = shelve.open('review')\r\n        reviews_dict = db['Reviews']\r\n        db.close()\r\n    except:\r\n        print(\"No reviews found.\")\r\n        reviews_dict={}\r\n\r\n    reviews_list = []\r\n    print(reviews_dict)\r\n    for key in reviews_dict:\r\n        review = reviews_dict.get(key)\r\n        reviews_list.append(review)\r\n    print(reviews_list)\r\n\r\n    return render_template('userHome.html', count_review=len(reviews_list), reviews_list=reviews_list)\r\n\r\n@app.route('/admin')\r\ndef home():\r\n    return render_template('home.html')\r\n\r\n@app.route('/createReservation', methods=['GET', 'POST'])\r\ndef createReservation():\r\n    createReservationForm = CreateReservationForm(request.form)\r\n    if request.method == 'POST' and createReservationForm.validate():\r\n        reservations_dict = {}\r\n        reservation_count_id = 0\r\n        db = shelve.open('storage.db', 'c')\r\n        try:\r\n            reservations_dict = db['Reservations']\r\n            reservation_count_id = int(db['reservation_count_id'])\r\n        except:\r\n            print(\"Error in retrieving Reservation from storage.db.\")\r\n\r\n        reservation = Reservation.Reservation(createReservationForm.first_name.data, createReservationForm.last_name.data, createReservationForm.email.data, createReservationForm.contact.data, createReservationForm.date.data, createReservationForm.time_slot.data, createReservationForm.remarks.data)\r\n        #auto increment user_id from shelve\r\n        reservation_count_id = reservation_count_id + 1\r\n        reservation.set_reservation_id(reservation_count_id)\r\n        db['reservation_count_id'] = reservation_count_id\r\n\r\n        reservations_dict[reservation.get_reservation_id()] = reservation\r\n        db['Reservations'] = reservations_dict\r\n        db.close()\r\n\r\n        return redirect(url_for('confirmationReservation'))\r\n    return render_template('createReservation.html', form=createReservationForm)\r\n\r\n@app.route('/review', methods=['GET', 'POST'])\r\ndef createReview():\r\n    print(\"hi\")\r\n    createReviewForm = CreateReviewForm(request.form)\r\n    print(\"hello\")\r\n    if request.method == 'POST' and createReviewForm.validate():\r\n        reviews_dict = {}\r\n        review_count_review_id = 0\r\n        db = shelve.open('review')\r\n        print(\"chicken\")\r\n\r\n        try:\r\n            reviews_dict = db['Reviews']\r\n            review_count_review_id=db['review_count_review_id']\r\n            print(reviews_dict)\r\n        except:\r\n            print(\"Error in retrieving Reservation from storage.db.\")\r\n\r\n        print(\"dinosour\")\r\n        review = Review.Review(createReviewForm.reviewfirst_name.data, createReviewForm.reviewlast_name.data, createReviewForm.reviewfeedback.data)\r\n        #auto increment user_id from shelve\r\n        review_count_review_id = review_count_review_id + 1\r\n        review.set_review_id(review_count_review_id)\r\n        print(review_count_review_id)\r\n        db['review_count_review_id'] = review_count_review_id\r\n\r\n        reviews_dict[review.get_review_id()] = [review.get_review_id(), review.get_reviewfirst_name(), review.get_reviewlast_name(), review.get_reviewfeedback()]\r\n        db['Reviews'] = reviews_dict\r\n        print(reviews_dict)\r\n        db.close()\r\n        return redirect(url_for('user_home'))\r\n    return render_template('createReview.html', form=createReviewForm)\r\n\r\n@app.route('/adm_retrieveReservation', methods = ['POST','GET'])\r\ndef adm_retrieveReservation():\r\n    reservations_dict = {}\r\n    try:\r\n        db = shelve.open('storage.db', 'r')\r\n        reservations_dict = db['Reservations']\r\n        db.close()\r\n    except:\r\n        print(\"Unable to open storage.db\")\r\n\r\n    reservations_list = []\r\n    for key in reservations_dict:\r\n        reservation = reservations_dict.get(key)\r\n        reservations_list.append(reservation)\r\n    print(reservations_list)\r\n\r\n    reviews_dict = {}\r\n    try:\r\n        db = shelve.open('review', 'r')\r\n        reviews_dict = db ['Reviews']\r\n        db.close()\r\n        print(reviews_dict)\r\n    except:\r\n        print(\"Unable to open Reviews.db\")\r\n\r\n    reviews_list = []\r\n    for key in reviews_dict:\r\n        review = reviews_dict.get(key)\r\n        reviews_list.append(review)\r\n    print(reviews_list)\r\n    return render_template('adm_retrieveReservation.html', count_review=len(reviews_list), reviews_list=reviews_list, count=len(reservations_list), reservations_list = reservations_list)\r\n\r\n@app.route('/adm_updateReservation/<int:id>/', methods=['GET', 'POST'])\r\ndef update_Reservation(id):\r\n    update_reservation_form = CreateReservationForm(request.form)\r\n    if request.method == 'POST' and update_reservation_form.validate():\r\n        reservations_dict = {}\r\n        db = shelve.open('storage.db', 'w')\r\n        reservations_dict = db['Reservations']\r\n\r\n        reservation = reservations_dict.get(id)\r\n        reservation.set_first_name(update_reservation_form.first_name.data)\r\n        reservation.set_last_name(update_reservation_form.last_name.data)\r\n        reservation.set_email(update_reservation_form.email.data)\r\n        reservation.set_contact(update_reservation_form.contact.data)\r\n        reservation.set_date(update_reservation_form.date.data)\r\n        reservation.set_time_slot(update_reservation_form.time_slot.data)\r\n        reservation.set_remarks(update_reservation_form.remarks.data)\r\n        db['Reservations'] = reservations_dict\r\n        db.close()\r\n\r\n        return redirect(url_for('adm_retrieveReservation'))\r\n    else:\r\n        reservations_dict = {}\r\n        db = shelve.open('storage.db', 'r')\r\n        reservations_dict = db['Reservations']\r\n        db.close()\r\n\r\n        reservation = reservations_dict.get(id)\r\n        update_reservation_form.first_name.data = reservation.get_first_name()\r\n        update_reservation_form.last_name.data = reservation.get_last_name()\r\n        update_reservation_form.email.data = reservation.get_email()\r\n        update_reservation_form.contact.data = reservation.get_contact()\r\n        update_reservation_form.date.data = reservation.get_date()\r\n        update_reservation_form.time_slot.data = reservation.get_time_slot()\r\n        update_reservation_form.remarks.data = reservation.get_remarks()\r\n\r\n        return render_template('adm_updateReservation.html', form=update_reservation_form)\r\n\r\n    return render_template('adm_updateReservation.html', form=update_reservation_form)\r\n\r\n    return render_template('adm_updateReservation.html')\r\n\r\n@app.route('/confirmation')\r\ndef confirmationReservation():\r\n\r\n    return render_template('confirmationReservation.html')\r\n\r\n@app.route('/adm_deleteReservation/<int:id>', methods=['POST'])\r\ndef adm_deleteReservation(id):\r\n    reservations_dict = {}\r\n    db = shelve.open('storage.db', 'w')\r\n    reservations_dict = db['Reservations']\r\n    reservations_dict.pop(id)\r\n\r\n    db['Reservations'] = reservations_dict\r\n    db.close()\r\n\r\n    return redirect(url_for('adm_retrieveReservation'))\r\n\r\n@app.route('/adm_deleteReview/<id>', methods=['POST','GET'])\r\ndef adm_deleteReview(id):\r\n    db = shelve.open('review', 'w')\r\n    reviews_dict = db['Reviews']\r\n\r\n    reviews_dict.pop(int(id))\r\n\r\n    db['Reviews'] = reviews_dict\r\n    db.close()\r\n\r\n    return redirect(url_for('adm_retrieveReservation'))\r\n\r\n@app.route('/cart', methods = [\"GET\",\"POST\"])\r\ndef cart():\r\n    if request.method == \"POST\":\r\n        item = request.form[\"add_cart\"].split(',')\r\n        name = item[0]\r\n        cost = float(item[1])\r\n\r\n        if session['cart'].get(name):\r\n            session['cart'][name][1] += 1\r\n            session['cart'][name][2] = round(session['cart'][name][1] * session['cart'][name][0], 2)\r\n        else:\r\n            session['cart'][name] = [cost, 1, cost]\r\n    return render_template('TestuserHome.html')\r\n\r\n\r\n\r\n@app.route('/view_cart', methods = [\"GET\",\"POST\"])\r\ndef view_cart():\r\n    return render_template('Cart.html')\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n#Danish's part\r\n\r\n@app.route('/hotelRooms')\r\ndef hotel_rooms():\r\n    return render_template(\"hotel_rooms.html\")\r\n\r\n@app.route(\"/smallRoom\",methods=['GET','POST'])\r\ndef small_room():\r\n    form = BookingForm()\r\n    roomList=[]\r\n    guestDict={}\r\n    if request.method== \"POST\" and form.validate():\r\n        try:\r\n            roomdb = shelve.open(\"room.db\")\r\n            roomList = roomdb[\"SmallRoom\"]\r\n        except:\r\n            print(\"No Small Rooms occupied.\")\r\n            roomList= []\r\n            small_rooms=200\r\n            for i in range(small_rooms):\r\n                roomList.append(i)\r\n        try:\r\n            db = shelve.open(\"guests.db\")\r\n            guestDict = db[\"Guests\"]\r\n        except:\r\n            print(\"No guests found.\")\r\n            guestDict={}\r\n\r\n        roomsLeft=len(roomList)\r\n        room_number= random.randint(roomList[0],roomList[-1])\r\n        print(room_number)\r\n        session['bookindate'] = form.bookindate.data\r\n        session['bookoutdate'] = form.bookoutdate.data\r\n        session['room_choice'] = \"Small Room\"\r\n        session['room_number'] = room_number\r\n        return redirect(url_for('test_guest'))\r\n    return render_template(\"small_room.html\",form=form)\r\n\r\n\r\n@app.route(\"/server-dash\")\r\ndef server_dash():\r\n    return render_template(\"server_rooms.html\")\r\n\r\n@app.route(\"/book-rooms\",methods=['GET','POST'])\r\ndef room_booking():\r\n    form = BookingForm()\r\n    if request.method== \"POST\" and form.validate():\r\n        session['bookindate'] = form.bookindate.data\r\n        session['bookoutdate'] = form.bookoutdate.data\r\n        session['room_choice'] = form.roomname.data\r\n        print(\"hello world\")\r\n        return redirect(url_for('date'))\r\n    return render_template(\"booking_rooms.html\",form=form)\r\n\r\n@app.route('/finish', methods=['GET','POST'])\r\ndef date():\r\n    startdate = session['bookindate']\r\n    enddate = session['bookoutdate']\r\n    return render_template('finish.html')\r\n\r\n# @app.route('/thanks')\r\n# def thanks():\r\n#     return render_template(\"\")\r\n\r\n@app.route('/server-home')\r\ndef server_home():\r\n    return render_template(\"server_rooms.html\")\r\n\r\n@app.route('/guest-list')\r\ndef server_guests():\r\n    guestDict={}\r\n    db=shelve.open(\"guests.db\")\r\n    try:\r\n        guestDict=db[\"Guests\"]\r\n    except:\r\n        print(\"No guests found.\")\r\n        guestDict={}\r\n\r\n    guest_list=[]\r\n    for key in guestDict:\r\n        guest=guestDict.get(key)\r\n        guest_list.append(guest)\r\n\r\n    # How to count number of hospitals\r\n    hospital_list=[]\r\n    hospitalDict={}\r\n    try:\r\n        hospitalDict=db[\"Guests\"]\r\n    except:\r\n        hospitalDict={}\r\n    for key in hospitalDict:\r\n        guest=hospitalDict.get(key)\r\n        hospital=guest.get_location()\r\n        hospital_list.append(hospital)\r\n    hosp = dict(Counter(hospital_list))\r\n    db.close()\r\n    return render_template(\"guest_list.html\",guest_list=guest_list,count=len(guest_list),hosp=hosp)\r\n\r\n\r\n@app.route('/test-guest', methods=[\"GET\",\"POST\"])\r\ndef test_guest():\r\n    createBooking=GuestBooking(request.form)\r\n    form=GuestBooking()\r\n    hospital_list=[]\r\n    hospitaldb = shelve.open(\"hospital.db\")\r\n    occupation_list = []\r\n    occupationdb=shelve.open(\"occupation.db\")\r\n    try:\r\n        hospital_list = hospitaldb[\"Hospital_choices\"]\r\n\r\n    except:\r\n        print(\"Restoring default hospitals.\")\r\n        hospitaldb[\"Hospital_choices\"] = Hospital.hospitalList\r\n        hospital_list = hospitaldb[\"Hospital_choices\"]\r\n\r\n    try:\r\n        occupation_list = occupationdb[\"Occupation_choices\"]\r\n\r\n    except:\r\n        print(\"Restoring default occupations.\")\r\n        occupationdb[\"Occupation_choices\"] = Occupation.occupationList\r\n        occupation_list = occupationdb[\"Occupation_choices\"]\r\n\r\n    print(hospital_list)\r\n    print(occupation_list)\r\n    hospitalChoices=list(zip(hospital_list,hospital_list))\r\n    occupationChoices=list(zip(occupation_list,occupation_list))\r\n    createBooking.location.choices = hospitalChoices\r\n    createBooking.occupation.choices = occupationChoices\r\n    form.location.choices = hospitalChoices\r\n    form.occupation.choices = occupationChoices\r\n\r\n\r\n    if request.method== \"POST\" and createBooking.validate():\r\n        guestDict = {}\r\n        db = shelve.open(\"guests.db\")\r\n        guest_id=0\r\n        guestDict2 = {}\r\n\r\n        try:\r\n            guestDict = db[\"Guests\"]\r\n            guest_id=int(db[\"guest_id\"])\r\n            guestDict2 = db[\"Guest_RoomNumber\"]\r\n        except:\r\n            print(\"Error in Guest Database. Try again.\")\r\n\r\n\r\n        guest = Guest(createBooking.name.data,createBooking.industry.data,createBooking.occupation.data,createBooking.location.data,createBooking.transport.data)\r\n        guest_id+=1\r\n        guest.set_guest_id(guest_id)\r\n        guest.set_room_number(session['room_number'])\r\n        guest.set_room_type(session['room_choice'])\r\n        db[\"guest_id\"] = guest_id\r\n        guestDict[guest.get_guest_id()] = guest\r\n        guestDict2[guest.get_room_number()] = guest\r\n        db[\"Guest_RoomNumber\"] = guestDict2\r\n        db[\"Guests\"] = guestDict\r\n        hospitaldb.close()\r\n        db.close()\r\n        return redirect(url_for('server_guests'))\r\n\r\n    return render_template(\"booking_details.html\",form=form)\r\n\r\n\r\n\r\n@app.route('/grade-assign/<int:id>',methods=[\"GET\",\"POST\"])\r\ndef assign_grade(id):\r\n    gradeForm= GradeForm(request.form)\r\n    createBooking = GuestBooking(request.form)\r\n    hospital_list=[]\r\n    hospitaldb = shelve.open(\"hospital.db\")\r\n    occupation_list = []\r\n    occupationdb=shelve.open(\"occupation.db\")\r\n    hospital_list = hospitaldb[\"Hospital_choices\"]\r\n    occupation_list = occupationdb[\"Occupation_choices\"]\r\n    hospitalChoices=list(zip(hospital_list,hospital_list))\r\n    occupationChoices=list(zip(occupation_list,occupation_list))\r\n    createBooking.location.choices = hospitalChoices\r\n    createBooking.occupation.choices = occupationChoices\r\n\r\n    if request.method== \"POST\" and gradeForm.validate():\r\n        guestDict={}\r\n        guestDict2={}\r\n        try:\r\n            db=shelve.open(\"guests.db\")\r\n            guestDict = db[\"Guests\"]\r\n            guestDict2= db[\"Guest_RoomNumber\"]\r\n        except:\r\n            print(\"Error opening guest database.\")\r\n\r\n        guest=guestDict.get(id)\r\n        guest.set_grade(gradeForm.grade.data)\r\n        guest.set_priority(gradeForm.priority.data)\r\n        guest2 = guestDict2.get(guest.get_room_number())\r\n        guest2.set_grade(gradeForm.grade.data)\r\n        guest2.set_priority(gradeForm.priority.data)\r\n        db[\"Guests\"]= guestDict\r\n        db[\"Guest_RoomNumber\"] = guestDict2\r\n        db.close()\r\n        return redirect(url_for('server_guests'))\r\n    else:\r\n        guestDict = {}\r\n        try:\r\n            db = shelve.open(\"guests.db\")\r\n            guestDict = db[\"Guests\"]\r\n        except:\r\n            print(\"Error opening guests database.\")\r\n\r\n        guest=guestDict.get(id)\r\n        createBooking.name.data=guest.get_name()\r\n        createBooking.occupation.data=guest.get_occupation()\r\n        createBooking.industry.data = guest.get_industry()\r\n        createBooking.location.data = guest.get_location()\r\n        createBooking.transport.data = guest.get_transport()\r\n        gradeForm.grade.data = guest.get_grade()\r\n        gradeForm.priority.data = guest.get_priority()\r\n\r\n\r\n\r\n        return render_template('grade_legend.html',guest=guest,form=gradeForm,guestForm=createBooking)\r\n\r\n@app.route('/edit-guest/<int:id>',methods=[\"GET\",\"POST\"])\r\ndef edit_guest(id):\r\n    gradeForm= GradeForm(request.form)\r\n    createBooking = GuestBooking(request.form)\r\n    hospital_list=[]\r\n    hospitaldb = shelve.open(\"hospital.db\")\r\n    occupation_list = []\r\n    occupationdb=shelve.open(\"occupation.db\")\r\n    hospital_list = hospitaldb[\"Hospital_choices\"]\r\n    occupation_list = occupationdb[\"Occupation_choices\"]\r\n    hospitalChoices=list(zip(hospital_list,hospital_list))\r\n    occupationChoices=list(zip(occupation_list,occupation_list))\r\n    createBooking.location.choices = hospitalChoices\r\n    createBooking.occupation.choices = occupationChoices\r\n\r\n    if request.method== \"POST\" and createBooking.validate():\r\n        guestDict={}\r\n        try:\r\n            db=shelve.open(\"guests.db\")\r\n            guestDict = db[\"Guests\"]\r\n        except:\r\n            print(\"Error opening guest database.\")\r\n        guest=guestDict.get(id)\r\n        guest.set_name(createBooking.name.data)\r\n        guest.set_occupation(createBooking.occupation.data)\r\n        guest.set_industry(createBooking.industry.data)\r\n        guest.set_location(createBooking.location.data)\r\n        guest.set_transport(createBooking.transport.data)\r\n        db[\"Guests\"]= guestDict\r\n        db.close()\r\n        return redirect(url_for('server_guests'))\r\n    else:\r\n        guestDict = {}\r\n        try:\r\n            db = shelve.open(\"guests.db\")\r\n            guestDict = db[\"Guests\"]\r\n        except:\r\n            print(\"Error opening guests database.\")\r\n\r\n        guest=guestDict.get(id)\r\n        createBooking.name.data=guest.get_name()\r\n        createBooking.occupation.data=guest.get_occupation()\r\n        createBooking.industry.data = guest.get_industry()\r\n        createBooking.location.data = guest.get_location()\r\n        createBooking.transport.data = guest.get_transport()\r\n        gradeForm.grade.data = guest.get_grade()\r\n        gradeForm.priority.data = guest.get_priority()\r\n        db.close()\r\n\r\n\r\n\r\n        return render_template('guest_edit.html',guest=guest,form=createBooking,guestForm=gradeForm)\r\n\r\n\r\n@app.route('/delete-guest/<int:id>', methods=['POST'])\r\ndef delete_guest(id):\r\n    guest_dict = {}\r\n    db = shelve.open(\"guests.db\")\r\n    guest_dict = db[\"Guests\"]\r\n\r\n    guest_dict.pop(id)\r\n\r\n    db[\"Guests\"] = guest_dict\r\n    db.close()\r\n\r\n    return redirect(url_for('server_guests'))\r\n\r\n@app.route('/delete-gp/<int:id>', methods=['POST'])\r\ndef delete_gp(id):\r\n    guest_dict = {}\r\n    db = shelve.open(\"guests.db\")\r\n    guest_dict = db[\"Guests\"]\r\n\r\n    guest = guest_dict.get(id)\r\n\r\n    guest.set_grade(\"\")\r\n    guest.set_priority(\"\")\r\n\r\n    db[\"Guests\"] = guest_dict\r\n    db.close()\r\n\r\n    return redirect(url_for('server_guests'))\r\n\r\n\r\n\r\n@app.route(\"/hospital-create\",methods=[\"GET\",\"POST\"])\r\ndef hospital_create():\r\n    createHospital= HospitalForm(request.form)\r\n    if request.method== \"POST\" and createHospital.validate():\r\n        hospital_list = []\r\n        hospitaldb = shelve.open(\"hospital.db\")\r\n        hospital_dict={}\r\n        try:\r\n            hospital_list = hospitaldb[\"Hospital_choices\"]\r\n            hospital_dict=hospitaldb[\"Hospitals\"]\r\n            hospital_id= int(hospitaldb[\"hospital_id\"])\r\n        except:\r\n            print(\"Error in retrieving database. Restoring default hospitals.\")\r\n            hospitaldb[\"Hospital_choices\"] = Hospital.hospitalList\r\n            hospital_id = 1\r\n            for x in Hospital.hospitalDict:\r\n                hospital = Hospital(x[\"Name\"], x[\"Address\"], x[\"Contact\"], x[\"Beds\"])\r\n                hospital_dict[hospital_id] = hospital\r\n                hospital.set_hospital_id(hospital_id)\r\n                hospital_id += 1\r\n            hospitaldb[\"hospital_id\"] = hospital_id\r\n            hospitaldb[\"Hospitals\"] = hospital_dict\r\n            hospital_list = hospitaldb[\"Hospital_choices\"]\r\n\r\n        hospital_id += 1\r\n        hospital = Hospital(createHospital.hospital_name.data,createHospital.hospital_address.data,createHospital.hospital_contact.data,createHospital.hospital_beds.data)\r\n        hospital.set_hospital_id(hospital_id)\r\n        hospital_list.append(hospital.get_name())\r\n        print(hospital_list)\r\n        hospital_dict[hospital.get_hospital_id()] = hospital\r\n        hospitaldb[\"hospital_id\"]=hospital_id\r\n        hospitaldb[\"Hospitals\"] = hospital_dict\r\n        hospitaldb[\"Hospital_choices\"]=hospital_list\r\n        hospitaldb.close()\r\n        return redirect(url_for('hospital_list'))\r\n    return render_template(\"hospital_create.html\",form=createHospital)\r\n\r\n@app.route('/delete-hospital/<int:id>', methods=['POST'])\r\ndef delete_hospital(id):\r\n    hospital_dict = {}\r\n    hospital_choices=[]\r\n    hospitaldb = shelve.open(\"hospital.db\")\r\n    hospital_dict = hospitaldb[\"Hospitals\"]\r\n    hospital_choices=hospitaldb[\"Hospital_choices\"]\r\n    print(\"BEFORE DELETE\")\r\n    print(hospital_choices)\r\n    hospital_name = hospital_dict[id].get_name()\r\n    hospital_dict.pop(id)\r\n    hospital_choices.remove(hospital_name)\r\n    print(\"AFTER DELETE\")\r\n    print(hospital_choices)\r\n    hospitaldb[\"Hospitals\"] = hospital_dict\r\n    hospitaldb[\"Hospital_choices\"]=hospital_choices\r\n    hospitaldb.close()\r\n\r\n    return redirect(url_for('hospital_list'))\r\n\r\n@app.route('/deletemulti',methods=[\"GET\", \"POST\"])\r\ndef hospital_multi():\r\n    hospital_dict = {}\r\n    hospital_choices = []\r\n    hospital_name=\"\"\r\n    hospitaldb = shelve.open(\"hospital.db\")\r\n    hospital_dict = hospitaldb[\"Hospitals\"]\r\n    hospital_choices = hospitaldb[\"Hospital_choices\"]\r\n    print(\"This is the hospital choices\")\r\n    print(hospital_dict)\r\n\r\n    if request.method == 'POST':\r\n        data = request.json\r\n        for x in data:\r\n            hospital_name=hospital_dict[int(x)].get_name()\r\n            hospital_dict.pop(int(x))\r\n            hospital_choices.remove(hospital_name)\r\n\r\n        hospitaldb[\"Hospitals\"] = hospital_dict\r\n        print(hospital_choices)\r\n        hospitaldb[\"Hospital_choices\"] = hospital_choices\r\n        hospitaldb.close()\r\n        return jsonify(data)\r\n    return redirect(url_for('hospital_list'))\r\n\r\n@app.route('/hospital-reset', methods=[\"POST\"])\r\ndef hospital_reset():\r\n    hospitaldb = shelve.open(\"hospital.db\")\r\n    hospital_Dict = {}\r\n    hospital_id = int(hospitaldb[\"hospital_id\"])\r\n    print(\"Resetting hospitals.\")\r\n    hospital_id = 0\r\n    hospitaldb[\"Hospital_choices\"] = Hospital.hospitalList\r\n    for x in Hospital.hospitalDict:\r\n        hospital = Hospital(x[\"Name\"], x[\"Address\"], x[\"Contact\"], x[\"Beds\"])\r\n        hospital_Dict[hospital_id] = hospital\r\n        hospital.set_hospital_id(hospital_id)\r\n        hospital_id += 1\r\n        print(hospital_id)\r\n    hospital_id -= 1\r\n    hospitaldb[\"hospital_id\"] = hospital_id\r\n    hospitaldb[\"Hospitals\"] = hospital_Dict\r\n    hospitaldb.close()\r\n    return redirect(url_for('hospital_list'))\r\n\r\n\r\n\r\n@app.route('/hospital-list')\r\ndef hospital_list():\r\n    createHospital = HospitalForm(request.form)\r\n    hospitaldb = shelve.open(\"hospital.db\")\r\n    db = shelve.open(\"guests.db\")\r\n    hospital_list = []\r\n    hospital_Dict = {}\r\n    amount_list = []\r\n\r\n    try:\r\n        hospital_Dict = hospitaldb[\"Hospitals\"]\r\n        hospital_id = int(hospitaldb[\"hospital_id\"])\r\n    except:\r\n        print(\"Error loading hospitals. Resetting hospitals.\")\r\n        hospital_id = 0\r\n        hospitaldb[\"Hospital_choices\"] = Hospital.hospitalList\r\n        for x in Hospital.hospitalDict:\r\n            hospital = Hospital(x[\"Name\"], x[\"Address\"], x[\"Contact\"], x[\"Beds\"])\r\n            hospital_Dict[hospital_id] = hospital\r\n            hospital.set_hospital_id(hospital_id)\r\n            hospital_id += 1\r\n            print(hospital_id)\r\n\r\n        hospital_id-=1\r\n        hospitaldb[\"hospital_id\"] = hospital_id\r\n        hospitaldb[\"Hospitals\"] = hospital_Dict\r\n\r\n\r\n        print(hospitaldb[\"Hospital_choices\"])\r\n\r\n    # Count number of hospitals\r\n    try:\r\n        guestDict = db[\"Guests\"]\r\n    except:\r\n        guestDict = {}\r\n    for key in guestDict:\r\n        guest = guestDict.get(key)\r\n        amount = guest.get_location()\r\n        amount_list.append(amount)\r\n    hosp = dict(Counter(amount_list))\r\n\r\n    for key in hospital_Dict:\r\n        hospital = hospital_Dict.get(key)\r\n        hospital_list.append(hospital)\r\n\r\n    # hosp = dict(Counter(hospital_list))\r\n    hospitaldb.close()\r\n    db.close()\r\n    return render_template(\"hospital_list.html\", hospital_list=hospital_list, hosp=hosp)\r\n\r\n@app.route('/hospital-edit/<int:id>',methods=[\"GET\",\"POST\"])\r\ndef hospital_edit(id):\r\n    hospitalForm= HospitalForm(request.form)\r\n    createHospital = HospitalForm(request.form)\r\n    if request.method== \"POST\" and hospitalForm.validate():\r\n        hospitalDict={}\r\n        hospital_list=[]\r\n        try:\r\n            hospitaldb=shelve.open(\"hospital.db\")\r\n            hospitalDict = hospitaldb[\"Hospitals\"]\r\n            hospital_list = hospitaldb[\"Hospital_choices\"]\r\n        except:\r\n            print(\"Error opening hospital database.\")\r\n\r\n        hospital=hospitalDict.get(id)\r\n        hospital.set_name(createHospital.hospital_name.data)\r\n        hospital_list[id] = createHospital.hospital_name.data\r\n        hospital.set_address(createHospital.hospital_address.data)\r\n        hospital.set_contact(createHospital.hospital_contact.data)\r\n        hospital.set_beds(createHospital.hospital_beds.data)\r\n        hospitaldb[\"Hospitals\"]= hospitalDict\r\n        hospitaldb[\"Hospital_choices\"] = hospital_list\r\n        hospitaldb.close()\r\n        return redirect(url_for('hospital_list'))\r\n    else:\r\n        print(\"2nd option desu\")\r\n        hospitalDict = {}\r\n        try:\r\n            hospitaldb = shelve.open(\"hospital.db\")\r\n            hospitalDict = hospitaldb[\"Hospitals\"]\r\n        except:\r\n            print(\"Error opening hospital database.\")\r\n\r\n        hospital=hospitalDict.get(id)\r\n        createHospital.hospital_name.data=hospital.get_name()\r\n        createHospital.hospital_address.data=hospital.get_address()\r\n        createHospital.hospital_contact.data = hospital.get_contact()\r\n        createHospital.hospital_beds.data = hospital.get_beds()\r\n\r\n\r\n\r\n        return render_template('hospital_edit.html',hospital=hospital,form=createHospital)\r\n\r\n\r\n@app.route('/occupation-list')\r\ndef occupation_list():\r\n    createOccupation = OccupationForm(request.form)\r\n    occupationdb = shelve.open(\"occupation.db\")\r\n    occupation_list = []\r\n    occupation_Dict = {}\r\n    try:\r\n        occupation_Dict = occupationdb[\"Occupations\"]\r\n        occupation_id = int(occupationdb[\"occupation_id\"])\r\n    except:\r\n        print(\"Error loading occupations in occupations list. Resetting occupations.\")\r\n        occupation_id = 1\r\n        occupationdb[\"Occupation_choices\"] = Occupation.occupationList\r\n        for x in Occupation.occupationDict:\r\n            print(occupation_id)\r\n            occupation = Occupation(x[\"Occupation\"],x[\"Industry\"])\r\n            occupation_Dict[occupation_id] = occupation\r\n            occupation.set_occupation_id(occupation_id)\r\n            occupation_id += 1\r\n        occupation_id-=1\r\n        occupationdb[\"occupation_id\"] = occupation_id\r\n        occupationdb[\"Occupations\"] = occupation_Dict\r\n\r\n\r\n    print(occupation_Dict)\r\n\r\n    for key in occupation_Dict:\r\n        occupation = occupation_Dict.get(key)\r\n        occupation_list.append(occupation)\r\n\r\n    # hosp = dict(Counter(hospital_list))\r\n    occupationdb.close()\r\n    return render_template(\"occupation_list.html\", occupation_list=occupation_list)\r\n\r\n\r\n@app.route(\"/occupation-create\",methods=[\"GET\",\"POST\"])\r\ndef occupation_create():\r\n    createOccupation= OccupationForm(request.form)\r\n    if request.method== \"POST\" and createOccupation.validate():\r\n        occupation_list = []\r\n        occupationdb = shelve.open(\"occupation.db\")\r\n        occupation_dict={}\r\n        try:\r\n            occupation_list = occupationdb[\"Occupation_choices\"]\r\n            occupation_dict=occupationdb[\"Occupations\"]\r\n            occupation_id= int(occupationdb[\"occupation_id\"])\r\n        except:\r\n            print(\"Error in retrieving database. Restoring default occupations.\")\r\n            occupationdb[\"Occupation_choices\"] = Occupation.occupationList\r\n            occupation_id = 1\r\n            print(occupation_id)\r\n            for x in Occupation.occupationDict:\r\n                occupation = Occupation(x[\"Occupation\"],x[\"Industry\"])\r\n                occupation_dict[occupation_id] = occupation\r\n                occupation.set_occupation_id(occupation_id)\r\n                occupation_id += 1\r\n            occupation_id-=1\r\n            occupationdb[\"occupation_id\"] = occupation_id\r\n            occupationdb[\"Occupations\"] = occupation_dict\r\n            occupation_list = occupationdb[\"Occupation_choices\"]\r\n\r\n        occupation = Occupation(createOccupation.occupation_name.data,createOccupation.occupation_industry.data)\r\n        occupation_id+=1\r\n        occupation.set_occupation_id(occupation_id)\r\n        occupation_list.append(occupation.get_occupation())\r\n        print(occupation_list)\r\n        occupation_dict[occupation.get_occupation_id()] = occupation\r\n        occupationdb[\"occupation_id\"] = occupation_id\r\n        occupationdb[\"Occupations\"] = occupation_dict\r\n        occupationdb[\"Occupation_choices\"] = occupation_list\r\n        occupationdb.close()\r\n        return redirect(url_for('occupation_list'))\r\n    return render_template(\"occupation_create.html\",form=createOccupation)\r\n\r\n@app.route('/occupation-edit/<int:id>',methods=[\"GET\",\"POST\"])\r\ndef occupation_edit(id):\r\n    createOccupation= OccupationForm(request.form)\r\n    if request.method== \"POST\" and createOccupation.validate():\r\n        occupationDict={}\r\n        occupation_list=[]\r\n        try:\r\n            occupationdb=shelve.open(\"occupation.db\")\r\n            occupationDict = occupationdb[\"Occupations\"]\r\n            occupation_list = occupationdb[\"Occupation_choices\"]\r\n            print(occupation_list)\r\n        except:\r\n            print(\"Error opening Occupation database.\")\r\n\r\n        occupation=occupationDict.get(id)\r\n        test=occupation.get_occupation()\r\n        occupation.set_occupation(createOccupation.occupation_name.data)\r\n        occupation_list.remove(test)\r\n        occupation_list.append(createOccupation.occupation_name.data)\r\n        print(occupation_list)\r\n        occupation.set_industry(createOccupation.occupation_industry.data)\r\n        occupationdb[\"Occupations\"]= occupationDict\r\n        occupationdb[\"Occupation_choices\"] = occupation_list\r\n        occupationdb.close()\r\n        return redirect(url_for('occupation_list'))\r\n    else:\r\n        print(\"2nd option desu\")\r\n        occupationDict = {}\r\n        try:\r\n            occupationdb = shelve.open(\"occupation.db\")\r\n            occupationDict = occupationdb[\"Occupations\"]\r\n        except:\r\n            print(\"Error opening occupation database.\")\r\n\r\n        occupation=occupationDict.get(id)\r\n        createOccupation.occupation_name.data=occupation.get_occupation()\r\n        createOccupation.occupation_industry.data=occupation.get_industry()\r\n\r\n        return render_template('occupation_edit.html',occupation=occupation,form=createOccupation)\r\n\r\n\r\n@app.route('/delete-occupation/<int:id>', methods=['POST'])\r\ndef delete_occupation(id):\r\n    occupation_dict = {}\r\n    occupation_choices=[]\r\n    occupationdb = shelve.open(\"occupation.db\")\r\n    occupation_dict = occupationdb[\"Occupations\"]\r\n    occupation_choices=occupationdb[\"Occupation_choices\"]\r\n\r\n    occupation_name = occupation_dict[id].get_occupation()\r\n    occupation_dict.pop(id)\r\n    occupation_choices.remove(occupation_name)\r\n\r\n    occupationdb[\"Occupations\"] = occupation_dict\r\n    occupationdb[\"Occupation_choices\"] = occupation_choices\r\n    occupationdb.close()\r\n    return redirect(url_for('occupation_list'))\r\n\r\n@app.route('/occupation_multi',methods=[\"GET\", \"POST\"])\r\ndef occupation_multi():\r\n    occupation_dict = {}\r\n    occupation_choices = []\r\n    occupation_name=\"\"\r\n    occupationdb = shelve.open(\"occupation.db\")\r\n    occupation_dict = occupationdb[\"Occupations\"]\r\n    occupation_choices = occupationdb[\"Occupation_choices\"]\r\n\r\n    if request.method == 'POST':\r\n        data = request.json\r\n        for x in data:\r\n            occupation_name=occupation_dict[int(x)].get_occupation()\r\n            occupation_dict.pop(int(x))\r\n            occupation_choices.remove(occupation_name)\r\n\r\n        occupationdb[\"Occupations\"] = occupation_dict\r\n        print(occupation_choices)\r\n        occupationdb[\"Occupation_choices\"] = occupation_choices\r\n        occupationdb.close()\r\n        return jsonify(data)\r\n    return redirect(url_for('occupation_list'))\r\n\r\n@app.route('/occupation-reset', methods=[\"POST\"])\r\ndef occupation_reset():\r\n    occupationdb = shelve.open(\"occupation.db\")\r\n    occupation_Dict = {}\r\n    occupation_id = int(occupationdb[\"occupation_id\"])\r\n    print(\"Resetting occupations using the reset button.\")\r\n    occupation_id = 1\r\n    print(occupation_id)\r\n    occupationdb[\"Occupation_choices\"] = Occupation.occupationList\r\n    for x in Occupation.occupationDict:\r\n        occupation = Occupation(x[\"Occupation\"], x[\"Industry\"])\r\n        occupation_Dict[occupation_id] = occupation\r\n        occupation.set_occupation_id(occupation_id)\r\n        occupation_id += 1\r\n        print(occupation_id)\r\n    occupation_id -= 1\r\n    occupationdb[\"occupation_id\"] = occupation_id\r\n    occupationdb[\"Occupations\"] = occupation_Dict\r\n    occupationdb.close()\r\n    return redirect(url_for('occupation_list'))\r\n\r\n\r\n@app.route('/rooms-list')\r\ndef rooms_list():\r\n    roomsDict={}\r\n    roomsdb=shelve.open(\"rooms.db\")\r\n    db=shelve.open(\"guests.db\")\r\n\r\n    try:\r\n        roomsDict=roomsdb[\"emptyRooms\"]\r\n    except:\r\n        roomsDict={}\r\n\r\n    rooms_list=[]\r\n    for key in roomsDict:\r\n        rooms=roomsDict.get(key)\r\n        rooms_list.append(rooms)\r\n\r\n    # How to count number of hospitals\r\n    # hospital_list=[]\r\n    # hospitalDict={}\r\n    # hospitalDict=db[\"Guests\"]\r\n    # for key in hospitalDict:\r\n    #     guest=hospitalDict.get(key)\r\n    #     hospital=guest.get_location()\r\n    #     hospital_list.append(hospital)\r\n    # hosp = dict(Counter(hospital_list))\r\n    roomsdb.close()\r\n    return render_template(\"rooms_list.html\",rooms_list=rooms_list,count=len(rooms_list))\r\n\r\n\r\n@app.route('/vehicle-list')\r\ndef vehicle_list():\r\n    vehicleDict={}\r\n    vehicledb=shelve.open(\"vehicle.db\")\r\n\r\n    try:\r\n        vehicleDict=vehicledb[\"Vehicles\"]\r\n    except:\r\n        vehicleDict={}\r\n\r\n    vehicle_list=[]\r\n    for key in vehicleDict:\r\n        vehicle=vehicleDict.get(key)\r\n        vehicle_list.append(vehicle)\r\n\r\n    # How to count number of hospitals\r\n    # hospital_list=[]\r\n    # hospitalDict={}\r\n    # hospitalDict=db[\"Guests\"]\r\n    # for key in hospitalDict:\r\n    #     guest=hospitalDict.get(key)\r\n    #     hospital=guest.get_location()\r\n    #     hospital_list.append(hospital)\r\n    # hosp = dict(Counter(hospital_list))\r\n    vehicledb.close()\r\n    return render_template(\"vehicle_list.html\",vehicle_list=vehicle_list,count=len(vehicle_list))\r\n\r\n\r\n@app.route('/request-list')\r\ndef request_list():\r\n    requestDict={}\r\n    requestdb=shelve.open(\"requests.db\")\r\n    try:\r\n        requestDict=requestdb[\"Requests\"]\r\n    except:\r\n        print(\"No requests found.\")\r\n        requestDict={}\r\n\r\n    request_list=[]\r\n    for key in requestDict:\r\n        request=requestDict.get(key)\r\n        request_list.append(request)\r\n\r\n    requestdb.close()\r\n    return render_template(\"request_list.html\",request_list=request_list,count=len(request_list))\r\n\r\n@app.route('/requestSelectGuest')\r\ndef request_selectguest():\r\n    guestDict = {}\r\n    db = shelve.open(\"guests.db\")\r\n    try:\r\n        guestDict=db[\"Guest_RoomNumber\"]\r\n    except:\r\n        print(\"No guests found.\")\r\n        guestDict = {}\r\n\r\n    guest_list = []\r\n    for key in guestDict:\r\n        guest = guestDict.get(key)\r\n        guest_list.append(guest)\r\n    db.close()\r\n    return render_template(\"request_selectguest.html\",guest_list=guest_list,guest=guest)\r\n\r\n\r\n\r\n# @app.route('/nameAutoComplete')\r\n# def nameAutoComplete():\r\n#     guestDict = {}\r\n#     guestList=[]\r\n#     db = shelve.open(\"guests.db\")\r\n#     try:\r\n#         guestDict = db[\"Guests\"]\r\n#     except:\r\n#         print(\"No guests found.\")\r\n#\r\n#     for id in guestDict:\r\n#         guest=guestDict[id]\r\n#         guestList.append({guest.get_guest_id() : guest.get_name()})\r\n#     print(guestList)\r\n#     listing=jsonify(guestList)\r\n#     return listing\r\n\r\n\r\n@app.route('/request-create/<int:roomnum>', methods=[\"GET\",\"POST\"])\r\ndef create_request(roomnum):\r\n    createRequest=RequestForm(request.form)\r\n\r\n    if request.method== \"POST\" and createRequest.validate():\r\n        print(\"1st choice\")\r\n        guestDict={}\r\n        request_id = 0\r\n        requestDict = {}\r\n        try:\r\n            db=shelve.open(\"guests.db\")\r\n            guestDict=db[\"Guest_RoomNumber\"]\r\n            print(guestDict)\r\n        except:\r\n            print(\"No guests found.\")\r\n\r\n        try:\r\n            requestdb=shelve.open(\"requests.db\")\r\n            requestDict=requestdb[\"Requests\"]\r\n            print(requestDict)\r\n        except:\r\n            print(\"No requests found.\")\r\n        guest = guestDict.get(roomnum)\r\n        print(guest)\r\n        guest.set_request_type(createRequest.type.data)\r\n        guest.set_request_topic(createRequest.topic.data)\r\n        guest.set_request_details(createRequest.details.data)\r\n        request_id+=1\r\n        guest.set_request_id(request_id)\r\n        requestDict[guest.get_request_id()] = guest\r\n        requestdb[\"Requests\"] = requestDict\r\n        db.close()\r\n        requestdb.close()\r\n        return redirect(url_for('request_list'))\r\n    else:\r\n        print(\"2nd choice of creating request\")\r\n        guestDict = {}\r\n        requestDict = {}\r\n        try:\r\n            db=shelve.open(\"guests.db\")\r\n            guestDict=db[\"Guest_RoomNumber\"]\r\n            guestDict2=db[\"Guests\"]\r\n            print(guestDict)\r\n            print(guestDict2)\r\n        except:\r\n            print(\"No guests found.\")\r\n\r\n        try:\r\n            requestdb=shelve.open(\"requests.db\")\r\n            requestDict=requestdb[\"Requests\"]\r\n            print(requestDict)\r\n        except:\r\n            print(\"No requests found.\")\r\n            request_id=0\r\n        guest = guestDict.get(roomnum)\r\n\r\n        createRequest.type.data = guest.get_request_type()\r\n        createRequest.topic.data = guest.get_request_topic()\r\n        createRequest.details.data = guest.get_request_details()\r\n\r\n        requestdb.close()\r\n        db.close()\r\n\r\n    return render_template(\"request_create.html\",form=createRequest,guest=guest)\r\n\r\n\r\n@app.route('/edit-request/<int:id>',methods=[\"GET\",\"POST\"])\r\ndef edit_request(id):\r\n    createRequest = RequestForm(request.form)\r\n    if request.method== \"POST\" and createRequest.validate():\r\n        requestDict={}\r\n        print(\"1st choice of editing request\")\r\n        try:\r\n            requestdb=shelve.open(\"requests.db\")\r\n            requestDict = requestdb[\"Requests\"]\r\n        except:\r\n            print(\"Error opening request database.\")\r\n        quest=requestDict.get(id)\r\n        quest.set_request_type(createRequest.type.data)\r\n        quest.set_request_topic(createRequest.topic.data)\r\n        quest.set_request_details(createRequest.details.data)\r\n        requestdb[\"Requests\"]= requestDict\r\n        requestdb.close()\r\n        return redirect(url_for('request_list'))\r\n    else:\r\n        requestDict = {}\r\n        try:\r\n            requestdb = shelve.open(\"requests.db\")\r\n            requestDict = requestdb[\"Requests\"]\r\n        except:\r\n            print(\"Error opening requests database.\")\r\n\r\n        guest=requestDict.get(id)\r\n        print(guest)\r\n        createRequest.type.data=guest.get_request_type()\r\n        createRequest.topic.data=guest.get_request_topic()\r\n        createRequest.details.data = guest.get_request_details()\r\n        requestdb.close()\r\n\r\n\r\n\r\n        return render_template('request_edit.html',guest=guest,form=createRequest)\r\n\r\n\r\n@app.route('/delete-request/<int:id>', methods=['POST'])\r\ndef delete_request(id):\r\n    request_dict = {}\r\n    requestdb = shelve.open(\"requests.db\")\r\n    request_dict = requestdb[\"Requests\"]\r\n\r\n    request_dict.pop(id)\r\n\r\n    requestdb[\"Requests\"] = request_dict\r\n    request.close()\r\n\r\n    return redirect(url_for('request_list'))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n#ziyuan's part\r\n\r\n@app.route('/contactUs')\r\ndef contact_us():\r\n    return render_template('contactUs.html')\r\n\r\n\r\n@app.route('/createSupplier', methods=['GET', 'POST'])\r\ndef createSupplier():\r\n    createSupplierForm = CreateSupplierForm(request.form)\r\n    productname_list = []\r\n    productname_db = shelve.open(\"productname.db\")\r\n    try:\r\n        productname_list = productname_db[\"Product Name\"]\r\n\r\n    except:\r\n        productname_db[\"Product Name\"] = Supplier.productList\r\n        productname_list = productname_db[\"Product Name\"]\r\n\r\n    if createSupplierForm.new_product_name.data == \"\" or createSupplierForm.new_product_name.data == \" \":\r\n        pass\r\n    else:\r\n        seen = set()\r\n        if createSupplierForm.new_product_name.data not in seen:\r\n            productname_list.append(createSupplierForm.new_product_name.data)\r\n    productname_db[\"Product Name\"] = productname_list\r\n    productnameChoices = list(zip(productname_list, productname_list))\r\n    createSupplierForm.product_name.choices = productnameChoices\r\n\r\n    if request.method == 'POST' and createSupplierForm.validate():\r\n        suppliers_dict = {}\r\n        db = shelve.open('supplier.db', 'c')\r\n        try:\r\n            suppliers_dict = db['Suppliers']\r\n            supplier_company_name = db['supplier_company_name']\r\n        except:\r\n\r\n            print(\"Error in retrieving Supplier from supplier.db.\")\r\n        supplier = Supplier(createSupplierForm.company_name.data, createSupplierForm.uen_number.data,\r\n                            createSupplierForm.email.data, createSupplierForm.product_name.data,\r\n                            createSupplierForm.new_product_name.data)\r\n\r\n        suppliers_dict[supplier.get_company_name()] = supplier\r\n        db['Suppliers'] = suppliers_dict\r\n        db.close()\r\n        return redirect(url_for('retrieve_suppliers'))\r\n    return render_template('createSupplier.html', form=createSupplierForm)\r\n\r\n\r\n@app.route('/retrieveSuppliers')\r\ndef retrieve_suppliers():\r\n    suppliers_dict = {}\r\n    db = shelve.open('supplier.db')\r\n    try:\r\n        suppliers_dict = db['Suppliers']\r\n    except:\r\n        print('Error in retrieving Supplier from supplier.db.')\r\n        suppliers_dict = {}\r\n\r\n    suppliers_list = []\r\n    db.close()\r\n    for key in suppliers_dict:\r\n        supplier = suppliers_dict.get(key)\r\n        suppliers_list.append(supplier)\r\n\r\n    return render_template('retrieveSuppliers.html', count=len(suppliers_list), suppliers_list=suppliers_list)\r\n\r\n\r\n@app.route('/updateSupplier/<company_name>', methods=['GET', 'POST'])\r\ndef update_supplier(company_name):\r\n    createSupplierForm = CreateSupplierForm(request.form)\r\n    productname_list = []\r\n    productname_db = shelve.open(\"productname.db\")\r\n    try:\r\n        productname_list = productname_db[\"Product Name\"]\r\n\r\n    except:\r\n        productname_db[\"Product Name\"] = Supplier.productList\r\n        productname_list = productname_db[\"Product Name\"]\r\n    if createSupplierForm.new_product_name.data == \"\" or createSupplierForm.new_product_name.data == \" \":\r\n        pass\r\n    else:\r\n        seen = set()\r\n        if createSupplierForm.new_product_name.data not in seen:\r\n            productname_list.append(createSupplierForm.new_product_name.data)\r\n    productname_db[\"Product Name\"] = productname_list\r\n    productnameChoices = list(zip(productname_list, productname_list))\r\n    createSupplierForm.product_name.choices = productnameChoices\r\n\r\n    if request.method == 'POST' and createSupplierForm.validate():\r\n        suppliers_dict = {}\r\n        db = shelve.open('supplier.db', 'w')\r\n        suppliers_dict = db['Suppliers']\r\n\r\n        supplier = suppliers_dict.get(company_name)\r\n        supplier.set_company_name(createSupplierForm.company_name.data)\r\n        supplier.set_uen_number(createSupplierForm.uen_number.data)\r\n        supplier.set_email(createSupplierForm.email.data)\r\n        supplier.set_product_name(createSupplierForm.product_name.data)\r\n        supplier.set_new_product_name(createSupplierForm.new_product_name.data)\r\n        productname_list = []\r\n        productname_db = shelve.open(\"productname.db\")\r\n        try:\r\n            productname_list = productname_db[\"Product Name\"]\r\n\r\n        except:\r\n            productname_db[\"Product Name\"] = Supplier.productList\r\n            productname_list = productname_db[\"Product Name\"]\r\n        if createSupplierForm.new_product_name.data == \"\":\r\n            pass\r\n        else:\r\n            productname_list.append(createSupplierForm.new_product_name.data)\r\n        productname_db[\"Product Name\"] = productname_list\r\n\r\n        db['Suppliers'] = suppliers_dict\r\n        db.close()\r\n\r\n        return redirect(url_for('retrieve_suppliers'))\r\n    else:\r\n        suppliers_dict = {}\r\n        db = shelve.open('supplier.db', 'r')\r\n        suppliers_dict = db['Suppliers']\r\n        db.close()\r\n\r\n        supplier = suppliers_dict.get(company_name)\r\n        createSupplierForm.company_name.data = supplier.get_company_name()\r\n        createSupplierForm.uen_number.data = supplier.get_uen_number()\r\n        createSupplierForm.email.data = supplier.get_email()\r\n        createSupplierForm.product_name.data = supplier.get_product_name()\r\n        createSupplierForm.new_product_name.data = supplier.get_new_product_name()\r\n\r\n        return render_template('updateSupplier.html', form=createSupplierForm)\r\n\r\n\r\n@app.route('/deleteSupplier/<company_name>', methods=['POST'])\r\ndef delete_supplier(company_name):\r\n    suppliers_dict = {}\r\n    db = shelve.open('supplier.db', 'w')\r\n    suppliers_dict = db['Suppliers']\r\n    suppliers_dict.pop(company_name)\r\n    db['Suppliers'] = suppliers_dict\r\n    db.close()\r\n\r\n    return redirect(url_for('retrieve_suppliers'))\r\n\r\n\r\n@app.route('/createInventory', methods=['GET', 'POST'])\r\ndef createInventory():\r\n    suppliers_dict = {}\r\n    try:\r\n        db = shelve.open('supplier.db', 'r')\r\n        suppliers_dict = db['Suppliers']\r\n        db.close()\r\n    except:\r\n        print('Error in retrieving Supplier from supplier.db.')\r\n\r\n    suppliers_list = [('', 'Select')]\r\n    for key in suppliers_dict:\r\n        # supplier = suppliers_dict.get(key)\r\n        # suppliers_list.append((supplier.get_company_name(), supplier.get_company_name()))\r\n        suppliers_list.append((key, key))\r\n    createInventoryForm = CreateInventoryForm(request.form)\r\n    createInventoryForm.supplier.choices = suppliers_list\r\n\r\n    productname_list = []\r\n    productname_db = shelve.open(\"productname.db\")\r\n    try:\r\n        productname_list = productname_db[\"Product Name\"]\r\n\r\n    except:\r\n        productname_db[\"Product Name\"] = Supplier.productList\r\n        productname_list = productname_db[\"Product Name\"]\r\n\r\n    productname_db[\"Product Name\"] = productname_list\r\n    productnameChoices = list(zip(productname_list, productname_list))\r\n    createInventoryForm.product_name.choices = productnameChoices\r\n\r\n    if request.method == 'POST' and createInventoryForm.validate():\r\n        inventories_dict = {}\r\n        db = shelve.open('inventory.db', 'c')\r\n        try:\r\n            inventories_dict = db['Inventories']\r\n        except:\r\n            print(\"Error in retrieving Item List from inventory.db.\")\r\n        inventory = Inventory(createInventoryForm.item_name.data, createInventoryForm.supplier.data,\r\n                              createInventoryForm.product_name.data, createInventoryForm.quantity.data)\r\n        inventories_dict[inventory.get_item_name()] = inventory\r\n        db['Inventories'] = inventories_dict\r\n        db.close()\r\n        return redirect(url_for('retrieve_inventories'))\r\n    return render_template('createInventory.html', form=createInventoryForm)\r\n\r\n\r\n@app.route('/retrieveInventories')\r\ndef retrieve_inventories():\r\n    inventories_dict = {}\r\n    try:\r\n        db = shelve.open('inventory.db', 'r')\r\n        inventories_dict = db['Inventories']\r\n        db.close()\r\n    except:\r\n        print('Error in retrieving Item List from inventory.db.')\r\n\r\n    inventories_list = []\r\n    for key in inventories_dict:\r\n        inventory = inventories_dict.get(key)\r\n        inventories_list.append(inventory)\r\n\r\n    return render_template('retrieveInventories.html', count=len(inventories_list), inventories_list=inventories_list)\r\n\r\n\r\n@app.route('/updateInventory/<item_name>/', methods=['GET', 'POST'])\r\ndef update_inventory(item_name):\r\n    suppliers_dict = {}\r\n    try:\r\n        db = shelve.open('supplier.db', 'r')\r\n        suppliers_dict = db['Suppliers']\r\n        db.close()\r\n    except:\r\n        print('Error in retrieving Supplier from supplier.db.')\r\n\r\n    suppliers_list = [('', 'Select')]\r\n    for key in suppliers_dict:\r\n        # supplier = suppliers_dict.get(key)\r\n        # suppliers_list.append((supplier.get_company_name(), supplier.get_company_name()))\r\n        suppliers_list.append((key, key))\r\n    update_inventory_form = CreateInventoryForm(request.form)\r\n    update_inventory_form.supplier.choices = suppliers_list\r\n\r\n    productname_list = []\r\n    productname_db = shelve.open(\"productname.db\")\r\n    try:\r\n        productname_list = productname_db[\"Product Name\"]\r\n\r\n    except:\r\n        productname_db[\"Product Name\"] = Supplier.productList\r\n        productname_list = productname_db[\"Product Name\"]\r\n\r\n    productname_db[\"Product Name\"] = productname_list\r\n    productnameChoices = list(zip(productname_list, productname_list))\r\n    update_inventory_form.product_name.choices = productnameChoices\r\n\r\n    if request.method == 'POST' and update_inventory_form.validate():\r\n        inventories_dict = {}\r\n        db = shelve.open('inventory.db', 'w')\r\n        inventories_dict = db['Inventories']\r\n\r\n        inventory = inventories_dict.get(item_name)\r\n        inventory.set_item_name(update_inventory_form.item_name.data)\r\n        inventory.set_supplier(update_inventory_form.supplier.data)\r\n        inventory.set_product_name(update_inventory_form.product_name.data)\r\n        quantity = int(inventory.get_quantity() + update_inventory_form.quantity.data)\r\n        inventory.set_quantity(quantity)\r\n\r\n        db['Inventories'] = inventories_dict\r\n        db.close()\r\n\r\n        return redirect(url_for('retrieve_inventories'))\r\n    else:\r\n        inventories_dict = {}\r\n        db = shelve.open('inventory.db', 'r')\r\n        inventories_dict = db['Inventories']\r\n        db.close()\r\n\r\n        inventory = inventories_dict.get(item_name)\r\n        update_inventory_form.item_name.data = inventory.get_item_name()\r\n        update_inventory_form.supplier.data = inventory.get_supplier()\r\n        update_inventory_form.product_name.data = inventory.get_product_name()\r\n        update_inventory_form.quantity.data = inventory.get_quantity()\r\n\r\n        return render_template('updateInventory.html', form=update_inventory_form)\r\n\r\n\r\n@app.route('/deleteInventory/<item_name>', methods=['POST'])\r\ndef delete_inventory(item_name):\r\n    inventories_dict = {}\r\n    db = shelve.open('inventory.db', 'w')\r\n    inventories_dict = db['Inventories']\r\n    inventories_dict.pop(item_name)\r\n    db['Inventories'] = inventories_dict\r\n    db.close()\r\n\r\n    return redirect(url_for('retrieve_inventories'))\r\n\r\n\r\n@app.route('/createOrder', methods=['GET', 'POST'])\r\ndef createOrder():\r\n    createOrderForm = CreateOrderForm(request.form)\r\n    inventory_dict = {}\r\n    try:\r\n        db = shelve.open('inventory.db', 'r')\r\n        inventory_dict = db['Inventories']\r\n        db.close()\r\n    except:\r\n        print('Error in retrieving Inventory from inventory.db.')\r\n\r\n    inventory_list = [('', 'Select')]\r\n    for key in inventory_dict:\r\n        inventory_list.append((key, key))\r\n    createOrderForm.item_name.choices = inventory_list\r\n\r\n    suppliers_dict = {}\r\n    try:\r\n        db = shelve.open('supplier.db', 'r')\r\n        suppliers_dict = db['Suppliers']\r\n        db.close()\r\n    except:\r\n        print('Error in retrieving Supplier from supplier.db.')\r\n\r\n    suppliers_list = [('', 'Select')]\r\n    suppliers_email = []\r\n    supplierorder = {}\r\n    for key in suppliers_dict:\r\n        # supplier = suppliers_dict.get(key)\r\n        # suppliers_list.append((supplier.get_company_name(), supplier.get_company_name()))\r\n        supplier = suppliers_dict.get(key)\r\n        suppliers_list.append((supplier.get_company_name(), supplier.get_company_name()))\r\n        # suppliers_list.append((key, key))\r\n        suppliers_email.append(supplier.get_email())\r\n    createOrderForm.supplier.choices = suppliers_list\r\n\r\n    productname_list = []\r\n    productname_db = shelve.open(\"productname.db\")\r\n    try:\r\n        productname_list = productname_db[\"Product Name\"]\r\n\r\n    except:\r\n        productname_db[\"Product Name\"] = Supplier.productList\r\n        productname_list = productname_db[\"Product Name\"]\r\n\r\n    productname_db[\"Product Name\"] = productname_list\r\n    productnameChoices = list(zip(productname_list, productname_list))\r\n    createOrderForm.product_name.choices = productnameChoices\r\n\r\n    if request.method == 'POST' and createOrderForm.validate():\r\n        order_dict = {}\r\n        order_count_id = 0\r\n        db = shelve.open('order.db', 'c')\r\n        try:\r\n            order_dict = db['Order']\r\n            order_count_id = int(db['order_count_id'])\r\n        except:\r\n            print(\"Error in retrieving Order List from order.db.\")\r\n        order = Order(createOrderForm.item_name.data, createOrderForm.product_name.data,\r\n                      createOrderForm.supplier.data, createOrderForm.quantity.data, createOrderForm.remarks.data)\r\n        # auto increment order_id from shelve\r\n        order_count_id = order_count_id + 1\r\n        order.set_order_id(order_count_id)\r\n        db['order_count_id'] = order_count_id\r\n        order_dict[order.get_order_id()] = order\r\n        db['Order'] = order_dict\r\n        db.close()\r\n\r\n        count = 0\r\n        for key in suppliers_dict:\r\n            supplierorder[key] = suppliers_email[count]\r\n            if createOrderForm.supplier.data == key:\r\n                email = suppliers_email[count]\r\n            count += 1\r\n        print(email)\r\n\r\n        port = 587  # For SSL\r\n        smtp_server = \"smtp.gmail.com\"\r\n        sender_email = \"hotel.la.bodo@gmail.com\"  # Enter your address\r\n        # receiver_email = email  # Enter receiver address\r\n        password = \"Admin-123\"\r\n        subject = \"Order From Hotel La Bodo\"\r\n        text = \"Dear \" + createOrderForm.supplier.data + \",\\n\" + \"\\nWe would like to order another \" + str(\r\n            createOrderForm.quantity.data) \\\r\n               + \" \" + createOrderForm.item_name.data + \".\\n\\nAdditional Remarks:\" + \"\\n\" + createOrderForm.remarks.data + \"\\n\\nWe hope to hear from you soon!\\n\" + \"Sincerely,\\nHotel La Bodo\"\r\n        message = \"Subject: {}\\n\\n{}\".format(subject, text)\r\n\r\n        context = ssl.create_default_context()\r\n        try:\r\n            with smtplib.SMTP(smtp_server, port) as server:\r\n                server.ehlo()  # Can be omitted\r\n                server.starttls(context=context)\r\n                server.ehlo()  # Can be omitted\r\n                server.login(sender_email, password)\r\n                server.sendmail(sender_email, email, message)\r\n        except:\r\n            print(\"fail\")\r\n        print(message)\r\n\r\n        return redirect(url_for('retrieve_order'))\r\n    return render_template('createOrder.html', form=createOrderForm)\r\n\r\n\r\n@app.route('/retrieveOrder')\r\ndef retrieve_order():\r\n    order_dict = {}\r\n    try:\r\n        db = shelve.open('order.db', 'r')\r\n        order_dict = db['Order']\r\n        db.close()\r\n    except:\r\n        print('Error in retrieving Order List from order.db.')\r\n\r\n    order_list = []\r\n    for key in order_dict:\r\n        order = order_dict.get(key)\r\n        order_list.append(order)\r\n\r\n    return render_template('retrieveOrder.html', count=len(order_list), order_list=order_list)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n#Gabriel's part\r\n\r\n@app.route('/createPartnerships', methods=['GET', 'POST'])\r\ndef createPartnerships():\r\n    createPartnershipsForm = CreatePartnershipsForm(request.form)\r\n    if request.method == 'POST' and createPartnershipsForm.validate():\r\n\r\n        company_dict = {}\r\n        db = shelve.open('company.db', 'c')\r\n        try:\r\n            company_dict = db['company']\r\n\r\n        except:\r\n            print('Error in retrieving Company Name from ')\r\n\r\n        partnerships = Partnerships(createPartnershipsForm.company.data,\r\n                                    createPartnershipsForm.resources.data,\r\n                                    createPartnershipsForm.industry.data)\r\n\r\n        company_dict[partnerships.get_company()] = partnerships\r\n        db['company'] = company_dict\r\n\r\n        db.close()\r\n        print(\"hello\")\r\n        return redirect(url_for('retrievePartnerships'))\r\n    return render_template('createPartnerships.html', form=createPartnershipsForm)\r\n\r\n\r\n@app.route('/retrievePartnerships')\r\ndef retrievePartnerships():\r\n    partnerships_dict = {}\r\n    db = shelve.open('company.db')\r\n    try:\r\n        partnerships_dict = db['company']\r\n\r\n    except:\r\n        print('Error in retrieving Partnerships from partnerships.db.')\r\n        partnerships_dict = {}\r\n\r\n    partnerships_list = []\r\n    db.close()\r\n    for key in partnerships_dict:\r\n        partnerships = partnerships_dict.get(key)\r\n        partnerships_list.append(partnerships)\r\n    print(\"bye\")\r\n\r\n    return render_template('retrievePartnerships.html', count=len(partnerships_list),\r\n                           partnerships_list=partnerships_list)\r\n\r\n\r\n@app.route('/updatePartnerships/<company>', methods=['GET', 'POST'])\r\ndef updatePartnerships(company):\r\n    update_partnerships_form = CreatePartnershipsForm(request.form)\r\n    if request.method == 'POST' and update_partnerships_form.validate():\r\n        partnerships_dict = {}\r\n        db = shelve.open('company.db', 'w')\r\n        partnerships_dict = db['company']\r\n\r\n        partnerships = partnerships_dict.get(company)\r\n        partnerships.set_company(update_partnerships_form.company.data)\r\n        partnerships.set_resources(update_partnerships_form.resources.data)\r\n        partnerships.set_industry(update_partnerships_form.industry.data)\r\n\r\n        db['partnerships'] = partnerships_dict\r\n        db.close()\r\n\r\n        return redirect(url_for('updatePartnerships'))\r\n    else:\r\n        partnerships_dict = {}\r\n        db = shelve.open('company.db')\r\n        partnerships_dict = db['company']\r\n\r\n        partnerships = partnerships_dict.get(company)\r\n\r\n        update_partnerships_form.company.data = partnerships.get_company()\r\n        update_partnerships_form.resources.data = partnerships.get_resources()\r\n        update_partnerships_form.industry.data = partnerships.get_industry()\r\n\r\n        db.close()\r\n\r\n        return render_template('updatePartnerships.html', form=update_partnerships_form, partnerships=partnerships)\r\n\r\n\r\n@app.route('/deletePartnerships', methods=['POST'])\r\ndef deletePartnerships(company):\r\n    partnerships_dict = {}\r\n    db = shelve.open('company.db', 'w')\r\n    partnerships_dict = db['company']\r\n    partnerships_dict.pop(company)\r\n    db['company'] = partnerships_dict\r\n    db.close()\r\n\r\n    return redirect(url_for('retrievePartnerships.html'))\r\n\r\n\r\n@app.route('/createPackageDeal', methods=['GET', 'POST'])\r\ndef createPackageDeal():\r\n    print(\"hi\")\r\n    createPackageDealForm = CreatePackageDeal(request.form)\r\n    print(\"hi\")\r\n    if request.method == 'POST' and createPackageDealForm.validate():\r\n        print(\"chicken\")\r\n        attractions_dict = {}\r\n        db = shelve.open('attractions.db', 'c')\r\n        try:\r\n            attractions_dict = db['attraction']\r\n\r\n        except:\r\n            print('Error in retrieving Package Deal from ')\r\n        pd = PackageDeal(createPackageDealForm.attractions.data,\r\n                         createPackageDealForm.transport.data,\r\n                         createPackageDealForm.price.data,\r\n                         createPackageDealForm.code.data)\r\n\r\n        attractions_dict[pd.get_attractions()] = pd\r\n        db['attraction'] = attractions_dict\r\n\r\n        db.close()\r\n        print(\"hello\")\r\n        return redirect(url_for('retrievePackageDeal'))\r\n    return render_template('createPackageDeal.html', form=createPackageDealForm)\r\n\r\n\r\n@app.route('/retrievePackageDeal')\r\ndef retrievePackageDeal():\r\n    attractions_dict = {}\r\n    print(\"hello\")\r\n    db = shelve.open('attractions.db')\r\n    try:\r\n        attractions_dict = db['attraction']\r\n\r\n    except:\r\n        print('Error in retrieving Package Deal from attractions.db.')\r\n        attractions_dict = {}\r\n\r\n    attractions_list = []\r\n    db.close()\r\n    for key in attractions_dict:\r\n        attractions = attractions_dict.get(key)\r\n        attractions_list.append(attractions)\r\n    print(\"bye\")\r\n\r\n    return render_template('retrievePackageDeal.html', count=len(attractions_list), attractions_list=attractions_list)\r\n\r\n\r\n@app.route('/updatePackageDeal/<attractions>', methods=['GET', 'POST'])\r\ndef updatePackageDeal(packagedeal):\r\n    update_packagedeal_form = CreatePackageDeal(request.form)\r\n    if request.method == 'POST' and update_packagedeal_form.validate():\r\n        packagedeal_dict = {}\r\n        db = shelve.open('attractions.db', 'w')\r\n        packagedeal_dict = db['package']\r\n\r\n        packagedeal = packagedeal_dict.get(packagedeal)\r\n        packagedeal.set_attractions(update_packagedeal_form.company.data)\r\n        packagedeal.set_transport(update_packagedeal_form.resources.data)\r\n        packagedeal.set_price(update_packagedeal_form.industry.data)\r\n        packagedeal.set_code(update_packagedeal_form.industry.data)\r\n\r\n        db['package'] = packagedeal_dict\r\n        db.close()\r\n\r\n        return redirect(url_for('updatePackageDeal'))\r\n    else:\r\n        packagedeal_dict = {}\r\n        db = shelve.open('attractions.db')\r\n        packagedeal_dict = db['attraction']\r\n\r\n        packagedeal = packagedeal_dict.get(packagedeal)\r\n\r\n        update_packagedeal_form.attractions.data = packagedeal.get_attractions()\r\n        update_packagedeal_form.transport.data = packagedeal.get_transport()\r\n        update_packagedeal_form.price.data = packagedeal.get_price()\r\n        update_packagedeal_form.code.data = packagedeal.get_code()\r\n\r\n        db.close()\r\n\r\n        return render_template('updatePackageDeal.html', form=update_packagedeal_form, packagedeal=packagedeal)\r\n\r\n\r\n@app.route('/deletePackageDeal/<attractions>', methods=['POST'])\r\ndef deletePackageDeal(attractions):\r\n    attractions_dict = {}\r\n    db = shelve.open('attractions.db', 'w')\r\n    attractions_dict = db['attraction']\r\n    attractions_dict.pop(attractions)\r\n    db['attraction'] = attractions_dict\r\n    db.close()\r\n\r\n    return redirect(url_for('retrievePackageDeal'))\r\n\r\n\r\n@app.route('/login', methods = ['GET', 'POST'])\r\ndef login_user():\r\n    log_in_user_form = Login(request.form)\r\n    if request.method == 'POST' and log_in_user_form.validate():\r\n        customer_dict = {}\r\n        db = shelve.open('guests.db', 'r')\r\n        try:\r\n            customer_dict = db['CustomerInfo']\r\n        except:\r\n            print('Error in retrieving information')\r\n\r\n        username = log_in_user_form.username.data\r\n        password = log_in_user_form.password.data\r\n        if username in customer_dict:\r\n            real_password = customer_dict[username].get_password()\r\n            if password == real_password:\r\n                session['user_created'] = customer_dict[username].get_name()\r\n                session['Username'] = username\r\n\r\n    return render_template('login.html', form = log_in_user_form)\r\n\r\n\r\n# @app.route('/loginstaff', methods = ['GET', 'POST'])\r\n# def staff_login():\r\n#     error = None\r\n#     if request.method == 'POST':\r\n#         staff_dict = {}\r\n#         db = shelve.open('storage.db', 'r')\r\n#         staff_dict = db['Staff']\r\n#         for staff_id in staff_dict:\r\n#             staff = staff_dict.get(staff_id)\r\n#             if request.form['username'] == staff.get_username() and request.form['password'] == staff.get_password():\r\n#                 session['staff_account'] = staff.get_staff_id()\r\n#                 session['staff_username'] = staff.get_username()\r\n#                 return redirect(url_for('home'))\r\n#             elif request.form['username'] == 'staff' and request.form['password'] == 'password':\r\n#                 return redirect(url_for('retrieveStaff'))\r\n#             else:\r\n#                 error = 'Invalid Staff'\r\n#\r\n#     return render_template('loginstaff.html', error=error)\r\n#\r\n#\r\n#\r\n# @app.route('/home')\r\n# def staff_home():\r\n#     return render_template('home.html')\r\n#\r\n# @app.route('/logout')\r\n# def logout():\r\n#    session.pop('username', None)\r\n#    return redirect(url_for('login'))\r\n\r\n\r\nif __name__ == '__main__':\r\n    app.run(debug=True)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- __init__.py	(revision e15e498d4cf3dd659cf427564572b77a253833c1)
+++ __init__.py	(date 1613128245433)
@@ -1845,59 +1845,63 @@
 
     return redirect(url_for('retrievePackageDeal'))
 
+@app.route('/createUser', methods=['GET', 'POST'])
+def create_user():
+    sign_up_form = Signup(request.form)
+    print("yeeyee")
+    if request.method == 'POST' and sign_up_form.validate():
+        print("ass")
+        users_dict = {}
+        db = shelve.open('storage.db', 'c')
+        try:
+            users_dict = db['Users']
+            print("haircut")
+        except:
+            print("Error in retrieving Users from storage.db.")
+
+        user = User.User(sign_up_form.name.data,
+                         sign_up_form.username.data,
+                         sign_up_form.email.data,
+                         sign_up_form.gender.data,
+                         sign_up_form.phone_num.data,
+                         sign_up_form.password.data,
+                         )
 
-@app.route('/login', methods = ['GET', 'POST'])
+        users_dict[user.get_username()] = user
+        session['CurrentUsername'] = user.get_username()
+        db['Users'] = users_dict
+        db.close()
+        print('working')
+        return redirect(url_for('profile'))
+    return render_template('createUser.html', form=sign_up_form)
+
+@app.route('/GuestL', methods = ['GET', 'POST'])
 def login_user():
     log_in_user_form = Login(request.form)
     if request.method == 'POST' and log_in_user_form.validate():
         customer_dict = {}
-        db = shelve.open('guests.db', 'r')
+        db = shelve.open('storage.db', 'r')
         try:
-            customer_dict = db['CustomerInfo']
+            customer_dict = db['Users']
         except:
             print('Error in retrieving information')
 
         username = log_in_user_form.username.data
         password = log_in_user_form.password.data
+        print('1')
         if username in customer_dict:
             real_password = customer_dict[username].get_password()
+            print('2')
             if password == real_password:
-                session['user_created'] = customer_dict[username].get_name()
-                session['Username'] = username
-
-    return render_template('login.html', form = log_in_user_form)
+              session['CurrentUsername'] = username
+              print('3')
+              return redirect(url_for('profile'))
+    return render_template('GuestL.html', form = log_in_user_form)
 
-
-# @app.route('/loginstaff', methods = ['GET', 'POST'])
-# def staff_login():
-#     error = None
-#     if request.method == 'POST':
-#         staff_dict = {}
-#         db = shelve.open('storage.db', 'r')
-#         staff_dict = db['Staff']
-#         for staff_id in staff_dict:
-#             staff = staff_dict.get(staff_id)
-#             if request.form['username'] == staff.get_username() and request.form['password'] == staff.get_password():
-#                 session['staff_account'] = staff.get_staff_id()
-#                 session['staff_username'] = staff.get_username()
-#                 return redirect(url_for('home'))
-#             elif request.form['username'] == 'staff' and request.form['password'] == 'password':
-#                 return redirect(url_for('retrieveStaff'))
-#             else:
-#                 error = 'Invalid Staff'
-#
-#     return render_template('loginstaff.html', error=error)
-#
-#
-#
-# @app.route('/home')
-# def staff_home():
-#     return render_template('home.html')
-#
-# @app.route('/logout')
-# def logout():
-#    session.pop('username', None)
-#    return redirect(url_for('login'))
+@app.route('/GuestL')
+def logout():
+    session.pop('CurrentUsername', None)
+    return redirect(url_for('GuestL'))
 
 
 if __name__ == '__main__':
